/**
 * SPDXVersion: SPDX-1.1 Creator: Person: Nuno Brito (nuno.brito@triplecheck.de)
 * Creator: Organization: TripleCheck (http://triplecheck.de) Created:
 * 2014-05-13T00:00:00Z LicenseName: EUPL-1.1-without-appendix FileName:
 * TestMkdirNode.java FileType: SOURCE FileCopyrightText: <text> Copyright (c)
 * 2014 Nuno Brito, TripleCheck </text>
 * FileComment: <text> </text>
 */

package experiment;

import GUI.TreeRenderer;
import java.util.Enumeration;
import javax.swing.JTree;
import javax.swing.tree.DefaultTreeModel;
import spdxlib.swing.NodeType;
import spdxlib.swing.TreeNodeSPDX;

/**
 *
 * @author Nuno Brito
 */
public class TestMkdirNode extends javax.swing.JFrame {

    final public TreeNodeSPDX nodeFiles = new TreeNodeSPDX("Files");
    
    /**
     * Creates new form TestMkdirNode
     */
    public TestMkdirNode() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tree = new javax.swing.JTree();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setAlwaysOnTop(true);
        setLocationByPlatform(true);

        tree.setBorder(javax.swing.BorderFactory.createEmptyBorder(3, 2, 5, 5));
        tree.setAutoscrolls(true);
        tree.setLargeModel(true);
        tree.setRootVisible(false);
        tree.setRowHeight(18);
        tree.setToggleClickCount(1);
        tree.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                treeeventTreeMouseClicked(evt);
            }
        });
        tree.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                treeValueChanged(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tree, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tree, javax.swing.GroupLayout.DEFAULT_SIZE, 230, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void treeeventTreeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_treeeventTreeMouseClicked
    }//GEN-LAST:event_treeeventTreeMouseClicked

    private void treeValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_treeValueChanged

    }//GEN-LAST:event_treeValueChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TestMkdirNode.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TestMkdirNode.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TestMkdirNode.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TestMkdirNode.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                TestMkdirNode test = new TestMkdirNode();
                test.nodeAddRoot();
              
                // now do the test
                mkdirNodes(test.nodeFiles, "./examples/browser/simple.html");
                
                test.setVisible(true);
                
                
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTree tree;
    // End of variables declaration//GEN-END:variables

    public JTree getTree(){
        return tree;
    }

     /**
     * Add the basic root node to a treeview
     */
    public void nodeAddRoot(){
     // tree hook
        tree.setCellRenderer(new TreeRenderer()); 
        //Create the nodes.
        TreeNodeSPDX nodeRoot = new TreeNodeSPDX("root");
        nodeRoot.id = "Root";
        nodeRoot.add(nodeFiles);
        DefaultTreeModel treeModel = new DefaultTreeModel(nodeRoot);
        tree.setModel(treeModel);
    }
    
    
  static TreeNodeSPDX mkdirNodes(final TreeNodeSPDX startingFolder, final String nodePath){
      String[] paths = nodePath.split("/");
      TreeNodeSPDX baseFolder = startingFolder;
      for(String path : paths){
          baseFolder = mkdirNode(baseFolder, path);
      }
      // the last node is a file
      baseFolder.nodeType = NodeType.file;
      return baseFolder;
    }


  /**
   * Discover is a given folder node already exists. Otherwise, create one
   * @param parentNode  The base folder where we should look
   * @param find        The name of the folder
   * @return            The folder node
   */
static TreeNodeSPDX mkdirNode(final TreeNodeSPDX parentNode, final String find){
    // get a list of them all
    Enumeration list = parentNode.children();
    while(list.hasMoreElements()){
        // get the next element
        final TreeNodeSPDX child = (TreeNodeSPDX) list.nextElement();
        // we only care for folders, otherwise jump to the next element
        if(child.nodeType != NodeType.folder){
            continue;
        }
        // do we have a match?
        if(utils.text.equals(child.getTitle(), find)){
            return child;
        }
    }
    // we reached the end and didn't found it. That's ok, create one now
    TreeNodeSPDX thisNode = new TreeNodeSPDX(find);
    thisNode.nodeType = NodeType.folder;
    parentNode.add(thisNode);
    parentNode.add(thisNode);    
    return thisNode;
}
        
      
      
//        Enumeration list = thisFolder.children();
//        // go through each node on this list
//        while(list.hasMoreElements()){
//            // get the next element
//            final TreeNodeSPDX child = (TreeNodeSPDX) list.nextElement();
//            // we only care for folders, otherwise jump to the next element
//            if(child.nodeType != NodeType.folder){
//                continue;
//            }
//            // do we have a match?
//            if(utils.text.equals(child.getTitle(), remainingPath)){
//                return child;
//            }
//        }
 

}