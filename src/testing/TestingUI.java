/*
 * SPDXVersion: SPDX-1.1
 * Creator: Person: Nuno Brito (nuno.brito@triplecheck.de)
 * Creator: Organization: TripleCheck (contact@triplecheck.de)
 * Created: 2014-06-11T11:07:10Z
 * LicenseName: EUPL-1.1-without-appendix
 * FileName: TestingUI.java  
 * FileType: SOURCE
 * FileCopyrightText: <text> Copyright 2014 Nuno Brito, TripleCheck </text>
 * FileComment: <text> Testing the detection of licenses </text> 
 */

package testing;

import definitions.TriggerType;
import definitions.is;
import java.io.File;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import main.core;
import main.start;
import script.FileExtension;
import script.Trigger;
import script.log;
import spdxlib.ContentType;

/**
 *
 * @author Nuno Brito, 11th of June 2014 in Darmstadt, Germany.
 *  nuno.brito@triplecheck.de | http://nunobrito.eu
 */
public class TestingUI extends javax.swing.JFrame {

     int counter = 0; 
     String basePath = "";  
    
    /**
     * Creates new form TestingUI
     */
    public TestingUI() {
         // adopt the default user interface menus and buttons
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException ex) {} catch (IllegalAccessException ex) {
        } catch (InstantiationException ex) {
        } catch (UnsupportedLookAndFeelException ex) {
        }
        
        initComponents();
        
         // place the frame on the middle of the screen
        setLocationRelativeTo(null);
        log.write(is.RUNNING, "Version %1 %2", core.version,
                utils.misc.getDate(this.getClass()));
        doTesting();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        text = new javax.swing.JScrollPane();
        jEditorPane1 = new javax.swing.JEditorPane();
        textField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        launchTest = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("License detection test");
        setLocationByPlatform(true);

        text.setViewportView(jEditorPane1);

        textField.setText("./misc/test");

        jLabel1.setText("Location of source files to test");

        launchTest.setText("Test");
        launchTest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                launchTestActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(text, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(0, 349, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(textField)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(launchTest, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textField, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(launchTest, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(text, javax.swing.GroupLayout.DEFAULT_SIZE, 230, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void launchTestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_launchTestActionPerformed
        doTesting();
    }//GEN-LAST:event_launchTestActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TestingUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TestingUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TestingUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TestingUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            @Override
//            public void run() {
                new TestingUI().setVisible(true);
//            }
//        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JEditorPane jEditorPane1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JButton launchTest;
    private javax.swing.JScrollPane text;
    private javax.swing.JTextField textField;
    // End of variables declaration//GEN-END:variables

    /**
     * Launches the test
     */
    private void doTesting() {
        File folderBase = new File(textField.getText());
        basePath = folderBase.getAbsolutePath();
        processFiles(folderBase, 25);
        System.out.println("Found licenses: " + counter);
        System.exit(1981);
    }
    
    /**
 * Find all files in a given folder and respective subfolders to
 * start indexing them.
 * @param where A file object of the start folder
 * @param maxDeep How deep is the crawl allowed to proceed
 * @throws java.io.IOException
 */
 private void processFiles(File where, int maxDeep){
    File[] files = where.listFiles();
    if(files != null)
        for (File file : files) {
        if (file.isFile())
            processFile(file);
        else
            if ( (file.isDirectory())
                    &&( maxDeep-1 > 0 ) ){
                // do the recursive crawling
                processFiles(file, maxDeep-1);
            }
        }
 }

    private void processFile(File file) {
        // read this file from disk onto local memory
        final String contentNormalCase = utils.files.readAsString(file);
        final String contentLowerCase = contentNormalCase.toLowerCase();
        // there is a path available, let's get it
//        final String fileName = file.getAbsolutePath();
        
//        final int lastDot = fileName.lastIndexOf(".");
//        
//        if(lastDot == -1){
//            System.err.println("TU199 - Didn't processed: " + fileName);
//            return;
//        }
            
//        final String extension = fileName.substring(lastDot+1).toLowerCase();
//        final int fileExtensionIndex = core.extensions.getIndex(extension);
//        // add the file extension object
//        FileExtension fileExtension;
//        if(fileExtensionIndex != -1){
//            fileExtension = core.extensions.get(fileExtensionIndex);
//        }else{
//            fileExtension = core.extensions.getUnknownExtension();
//        }        
//        // only accept text files
//        if(fileExtension.getContentType().TEXT != ContentType.TEXT){
//            return;
//        }
        
        
//         if(file.getName().toLowerCase().contains("license")){
//                    System.out.println("--->" + file.getAbsolutePath());
//                }
                
        
        // try to identify some of the most common triggers
            for(Trigger thisTrigger: core.triggers.getList()){
                // we only want the license triggers
                if(thisTrigger.getType() != TriggerType.LICENSE){
                    continue;
                }

               
                // does our text contains an applicable trigger?
                if(thisTrigger.isApplicable(contentNormalCase, contentLowerCase)){
                    
//                    if(!thisTrigger.getResult().equals("LicenseInfoInFile: LGPL-2.1")){
//                        continue;
//                    }
                      if(!thisTrigger.getResult().endsWith(" BSD")){
                        continue;
                    }
                    
                   //result = result.concat(thisTrigger.getResult()).concat("\n");
                     counter++;
                     
                    System.out.println("#" + counter + " " 
                            + thisTrigger.getResult()
                            + " -> "
                            + file.getAbsolutePath().replace(basePath, "") 
                            );
                }
            }
      
    }
    
}
